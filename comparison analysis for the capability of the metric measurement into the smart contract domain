Metric	Measurement definition	Measurement interpretation in smart contract
WMC	Is the sum of the complexity for each method of a class.	Similar to the class, contracts are also divided into methods for which complexity can be measured.
DIT	Is the depth of inheritance of the class is the DIT metric for the class. In cases involving multiple inheritance, the DIT will be the maximum length from the node to the root of the tree.	Based on multiple inheritance nodes and roots that represent contracts in inheritance structure, the tree involved in the measurement can be designed and the maximum length determined.
CBO	CBO for a class is a count of the number of other classes to which it is coupled.	The measurement of this metric can also be determined in a smart contract; this will consist to identify all the contracts coupled with it.
RFC	Is absolute value of the set of all the methods in the class adding to all the methods called by the methods of the class	By analogy given method can call a method from another smart contract), then this cardinality can be determined in the smart contract context.
LCOM	Is a count of the number of method pairs whose similarity is null minus the count of method whose similarity is not not null	The notion of similarity about the method refers to the use of instance variable of the class by the method. Therefore the measurement of this metric can also be determined in smart contract domain given instance variable (state variable) of the contract can also be used by the contract methods which count number can be determined.
Stall Ratio	Are the Lines of non-progressive statements in a loop/ Total lines in the loop	The metric measurement is applicable in the smart contract context given that the Solidity language support loop statement. 
CPP	Is the number of child methods invoked with the parameter(s) based on the parameter(s) of the original invocation	The measurement is also well applicable. Given the coupling in the smart contract and the possibility for a method to share data, the number of child methods invoked with the parameter(s) based on the parameter(s) of the original invocation of the contract can also be determined.
CER	Critical Elements Ratio= Critical Data Elements in an Object /TotalNumber of Elements in the Object	In the smart contract context, critical data elements (method/state) also exist. This measurement in the smart contract consists to determine the number of the critical data element contract code and divide by the total number of elements in the contract.
Nex	The number of exceptions that have been included in the code to handle possible failures	The number of exceptions used to handle errors in a smart contract can be determined by identifying exceptions provided by Solidity to handle errors in a program. Therefore, this measurement is applicable
Noex	Is the number of missing exceptions that have been omitted	This measurement which consists of getting the number of missing exceptions can be applied in a smart contract. This will consist to identify in the code, the part where exception should have been applied. Tools like OYENTE [26]can also identify missing exceptions.
Roex	Is the ratio of the number of omitted exceptions (i.e. Noex) to the total number of exceptions that are related to security.	Given the Noex and Nex measurement are applicable in smart contract context, Roex=Noex/(Noex+Nex) is also applicable to smart contract
McCabe(CCM)	The cyclomatic number V(G) of a graph G with n vertices, e edges, and p connected components is v(G)=e- v(G)=e- n+p.	Smart contract structure with solidity (using decision statement, loop statement so on ) allows determining e, n, and p-value of program code.
Halstead's volume	V = N * log2(n), where n = n1 + n2, and N= N1 + N2 with N is The total number of operator occurrences and the total number of operand occurrences. ; and n is The total number of unique operators and unique operand occurrences.	Halstead's metrics measurements depend on n1=number of operand and n2=number of operators, which can be identified in solidity.
NCBC	Consider a class K1, with methods M1,……..Mn. Let each method have C1,……..Cm catch blocks. Then it is defined as the ratio of catch block in a class to the total number of possible catch blocks in a class	The measurement of this metric is based on the number of catch blocks in the program. Solidity does not support these statements. Solidity use feature like revert (), throw (), assert (). Then in Solidity, the measurement will be based on the number of these features (functions). Therefore, this measurement is applicable but by using features provided by Solidity
